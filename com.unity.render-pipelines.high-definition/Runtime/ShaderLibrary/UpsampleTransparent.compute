#pragma kernel UpsampleTransparent_Bilinear              UPSAMPLE_NAME=UpsampleTransparent_Bilinear BILINEAR 
#pragma kernel UpsampleTransparent_NearestDepth          UPSAMPLE_NAME=UpsampleTransparent_NearestDepth NEAREST_DEPTH

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

#define GROUP_SIZE 8

RW_TEXTURE2D_X(float3, _OutputTexture);
TEXTURE2D_X(_LowResTransparent);
TEXTURE2D_X(_InputTexture);

#ifdef NEAREST_DEPTH
TEXTURE2D_X_FLOAT(_LowResDepthTexture);
#endif

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void UPSAMPLE_NAME(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));
    float2 uv = posInputs.positionNDC;

    // TODO_FCC: Pass coord size.
    float2 fullResTexelSize = _ScreenSize.zw;
    float2 halfResTexelSize = 2.0f * fullResTexelSize;

#ifdef BILINEAR
    float4 lowResSample = SAMPLE_TEXTURE2D_X_LOD(_LowResTransparent, s_linear_clamp_sampler, ClampAndScaleUVForBilinear(uv, halfResTexelSize), 0.0);
    float4 fullResSample = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, s_linear_clamp_sampler, ClampAndScaleUVForBilinear(uv, fullResTexelSize), 0.0);
    float3 outColor = lowResSample.a * fullResSample.xyz + lowResSample.xyz;
    _OutputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = outColor;
#else
    _OutputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = SAMPLE_TEXTURE2D_X_LOD(_LowResTransparent, s_linear_clamp_sampler, ClampAndScaleUVForBilinear(uv, 2.0f * _ScreenSize.zw), 0.0).xyz;
#endif
}
